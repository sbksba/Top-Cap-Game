name: Release CI/CD
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:  # Manual trigger
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=true
          labels: |
            org.opencontainers.image.description=A Rust-powered Top-Cap web game.
            org.opencontainers.image.licenses=MIT

      - name: Extract Release Notes from CHANGELOG.md
        id: get_release_notes
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION_NO_V=$(echo "$TAG_NAME" | sed 's/^v//')

          RELEASE_BODY=$(awk -v version="$VERSION_NO_V" '
            BEGIN { found_version = 0; }
            /^## \[/{
              if ($0 ~ "^## \\[" version "\\]") {
                found_version = 1;
                next;
              } else if (found_version == 1) {
                exit;
              }
            }
            found_version == 1 { print }
          ' CHANGELOG.md)

          if [ -z "$(echo "$RELEASE_BODY" | tr -d '[:space:]')" ]; then
            echo "::error::No release notes found for version $VERSION_NO_V in CHANGELOG.md. Please add release notes."
            exit 1
          fi

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.get_release_notes.outputs.release_body }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (multi-arch)
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Cleanup Docker images
        run: docker image prune -af

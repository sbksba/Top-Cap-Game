name: Release CI/CD

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=true
          labels: |
            org.opencontainers.image.description=A Rust-powered Top-Cap web game.
            org.opencontainers.image.licenses=MIT

      # Extracts release notes for the current version from CHANGELOG.md.
      # This step uses 'awk' to find the relevant section based on the Git tag.
      - name: Extract Release Notes from CHANGELOG.md
        id: get_release_notes
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION_NO_V=$(echo "$TAG_NAME" | sed 's/^v//')

          RELEASE_BODY=$(awk -v version="$VERSION_NO_V" '
            BEGIN { found_version = 0; }
            /^## \[/{
              if ($0 ~ "^## \\[" version "\\]") {
                found_version = 1;
                next; # Skip the version header itself
              } else if (found_version == 1) {
                # Found the next version header, so stop
                exit;
              }
            }
            found_version == 1 { print }
          ' CHANGELOG.md)

          if [ -z "$(echo "$RELEASE_BODY" | tr -d '[:space:]')" ]; then
            echo "Warning: No specific release notes found for version ${VERSION_NO_V} in CHANGELOG.md. Using a generic message."
            RELEASE_BODY="## Release ${{ github.ref }}\n\nNo specific release notes found in CHANGELOG.md for this version. Please see commit history for details."
          fi

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash # Ensure bash is used for the shell commands

      # Creates a GitHub Release for the pushed tag.
      # IMPORTANT: 'draft: false' ensures the release is published immediately,
      # which is crucial for the GITHUB_TOKEN to have full write permissions for packages.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2 # Uses the latest v2 of release action
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.get_release_notes.outputs.release_body }}
          draft: false # Ensures the release is published, not a draft.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
